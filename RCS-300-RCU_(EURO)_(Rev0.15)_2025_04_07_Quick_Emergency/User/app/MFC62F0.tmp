/*=====================(C) COPYRIGHT 2008 Insem Inc.=========================
program 		:   
processor	  : STM32F103xx
compiler		: IAR 6.41A Compiler 
program BY 	: H.H.Hwang
date 			  : 2013.	  .
copy right 	: Plus - H.
===========================================================================*/

#define __UART3_H__

#include "stm32f10x_lib.h"
#include "main.h"

//========================================================================
/* UART3_initial	:								              */												
//========================================================================
void UART3_initial(void) {
NVIC_InitTypeDef NVIC_InitStructure;
USART_InitTypeDef USART_InitStructure;
GPIO_InitTypeDef GPIO_InitStructure;

	 /* Enable the USART3 Pins Partial Software Remapping */
//	GPIO_PinRemapConfig(GPIO_Remap_USART3, DISABLE);  

	/* Enable GPIOB and USART3 clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);
	 /* Enable USART3 clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
        
	/* Configure USART3 Tx (PB10) as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
        
	/* Configure USART3 Rx (PB11) as input floating */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

/* USART3 configuration ------------------------------------------------------*/
  /* USART3 configured as follow:
        - BaudRate = 115200 baud  
        - Word Length = 8 Bits
        - one Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
        - USART Clock disabled
        - USART CPOL: Clock is active low
        - USART CPHA: Data is captured on the second edge 
        - USART LastBit: The clock pulse of the last data bit is not output to 
                         the SCLK pin
  */
  USART_InitStructure.USART_BaudRate = 19200;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
//  USART_InitStructure.USART_Clock = USART_Clock_Disable;
// USART_InitStructure.USART_CPOL = USART_CPOL_Low;
//  USART_InitStructure.USART_CPHA = USART_CPHA_2Edge;
//  USART_InitStructure.USART_LastBit = USART_LastBit_Disable;
  
  /* Configure the USART3 */
  USART_Init(USART3, &USART_InitStructure);
  
 /* Enable the USART Transmoit interrupt: this interrupt is generated when the 
   USART1 transmit data register is empty */  
//  USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
  
/* Enable the USART Receive interrupt: this interrupt is generated when the 
   USART3 receive data register is not empty */
  USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
  
  /* Enable USART3 */
  USART_Cmd(USART3, ENABLE);
  
  /* Enable the USART3 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
}
void UART3_control_proc(void)
{
    unsigned char sub_device_kind;
    
          if(f_uart3_data_send_ok)
          {
              f_uart3_data_send_ok = 0;
              
              if(b_sub_device_table_2[cb_mode][id_number_2] == 0xff) id_number_2 = 0;
              sub_device_kind = b_sub_device_table_2[cb_mode][id_number_2++];
              switch(sub_device_kind){
                        
                case B_SMART_PAD:   //TNT(Tablet Night Table)
                  smart_pad_data_set(0);
                  break;                
                  
              case B_SMART_PAD_1 : //TNT(Tablet Night Table 2)
                  smart_pad_data_set(1);
                break;
              }          
          }
          
          UART3_tx_check();
          UART3_rx_check();
}


void smart_pad_data_set(unsigned char index)
{
  unsigned char crc = 0;
  unsigned char i=0,j,tt=0,dt1,dt2;
  if(f_chime_send) 
  {
    f_chime_send = 0;
    P_UART3_DIR = 1;
    uart3_tx_data_buf[i++] = ' ';                               //Preamble
    uart3_tx_data_buf[i++] = '(';                               //STX
    ++i;                                                        //Length point(아래에서 처리)
    uart3_tx_data_buf[i++] = 0x80+index;;                              //Device bit
    uart3_tx_data_buf[i++] = (dip_switch_buf[0] & 0x3f)+index;;        //RCU ID        
    uart3_tx_data_buf[i++] = 0x06;                     //Night Table Page Mode(chime)
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][0];  //Switch toggle bit 0
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][1];  //Switch toggle bit 1
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][2];  //Switch toggle bit 2
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][3];  //Switch toggle bit 3
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][4];  //Switch toggle bit 4
    uart3_tx_data_buf[i++] = f_chime_keep;              //chime call send
  }
  else 
  {
   if((tnt_page_mode == 0) || (tnt_page_mode > 5)) tnt_page_mode = 1;    //Default main page set
    
    P_UART3_DIR = 1;
    uart3_tx_data_buf[i++] = ' ';                               //Preamble
    uart3_tx_data_buf[i++] = '(';                               //STX
    ++i;                                                        //Length point(아래에서 처리)
    uart3_tx_data_buf[i++] = 0x80+index;                              //Device bit
    uart3_tx_data_buf[i++] = (dip_switch_buf[0] & 0x3f) + index;  //RCU ID        
    uart3_tx_data_buf[i++] = tnt_page_mode;                     //Night Table Page Mode
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][0];  //Switch toggle bit 0
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][1];  //Switch toggle bit 1
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][2];  //Switch toggle bit 2
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][3];  //Switch toggle bit 3
    uart3_tx_data_buf[i++] = tnt_toggle_bit[index][tnt_page_mode][4];  //Switch toggle bit 4
    
    switch(tnt_page_mode){
      case 1:   //Main page
        if(f_language_rx)
        {
          f_language_rx = 0;
          uart3_tx_data_buf[i++] = language_code;                 //언어코드
        }
        else uart3_tx_data_buf[i++] = 0xff;
        uart3_tx_data_buf[i++] = nt_room_status();              //Basic status
        uart3_tx_data_buf[i++] = room_data_buf[90];             //year
        uart3_tx_data_buf[i++] = room_data_buf[91];             //month
        uart3_tx_data_buf[i++] = room_data_buf[92];             //day
        uart3_tx_data_buf[i++] = room_data_buf[93];             //hour
        uart3_tx_data_buf[i++] = room_data_buf[94];             //min
        break;
        
      case 2:   //Light control page
        tt = 0;
        if(room_data_buf[45] & 0x02) tt |= 0x01;
        if(room_data_buf[45] & 0x04) tt |= 0x02; 
        if(room_data_buf[45] & 0x08) tt |= 0x04;    
        if(room_data_buf[45] & 0x10) tt |= 0x08;    
        if(room_data_buf[45] & 0x20) tt |= 0x10;    
        if(room_data_buf[45] & 0x40) tt |= 0x20;
        if(room_data_buf[45] & 0x80) tt |= 0x40;
        if(room_data_buf[47] & 0x01) tt |= 0x80;
        
        uart3_tx_data_buf[i++] = tt;
        
        uart3_tx_data_buf[i] = 0;
        switch(scene_mode){
          case 2: uart3_tx_data_buf[i] = 0x01;  break;
          case 3: uart3_tx_data_buf[i] = 0x02;  break;
          case 4: uart3_tx_data_buf[i] = 0x04;  break;
        }
        if(tt != 0) uart3_tx_data_buf[i] &= 0x7f;
        else uart3_tx_data_buf[i] |= 0x80;
        ++i;
        

        uart3_tx_data_buf[i++] = dimmer_apply_bit;              //Dimmer apply bit
        
        dt1 = dim_level_check(0);
        dt2 = dim_level_check(1);
        uart3_tx_data_buf[i++] = (dt2 * 0x10) + dt1;
        dt1 = dim_level_check(2);
        dt2 = dim_level_check(3);
        uart3_tx_data_buf[i++] = (dt2 * 0x10) + dt1;
        dt1 = dim_level_check(4);
        dt2 = dim_level_check(5);
        uart3_tx_data_buf[i++] = (dt2 * 0x10) + dt1;
        uart3_tx_data_buf[i++] = (dimmer_apply_bit & 0x80) | (scene_mode & 0x7f);               //Scene code & apply bit
        if(++dim_apply_count > 5){
          dim_apply_count = 10;
          dimmer_apply_bit = 0;
        }
        break;
        
      case 3:   //Temperature page
        uart3_tx_data_buf[i++] = ts_id;              //TS ID
        
        switch(ts_id)
        {
        case 0: //TS 1
          
          if(!ondol_set_flag[0])
          {
            uart3_tx_data_buf[i++] = room_data_buf[0];              //air Set temp 1
            uart3_tx_data_buf[i++] = room_data_buf[4];              //air check temp 1          
          }
          else
          {
            uart3_tx_data_buf[i++] = room_data_buf[8];              //floor Set temp 1
            uart3_tx_data_buf[i++] = room_data_buf[4];              //air check temp 1
          }
          
          break;
          
        case 1: //TS 2
          
          if(!ondol_set_flag[1])
          {          
            uart3_tx_data_buf[i++] = room_data_buf[1];              //Set temp 2
            uart3_tx_data_buf[i++] = room_data_buf[5];              //check temp 2              
          }
          else
          {
            uart3_tx_data_buf[i++] = room_data_buf[9];              //floor Set temp 2
            uart3_tx_data_buf[i++] = room_data_buf[5];              //air check temp 2       
          }
          
          break;
          
        case 2: //TS 3
          if(!ondol_set_flag[2])
          {                 
            uart3_tx_data_buf[i++] = room_data_buf[2];              //Set temp 3
            uart3_tx_data_buf[i++] = room_data_buf[6];              //check temp 3     
          }
          else
          {
            uart3_tx_data_buf[i++] = room_data_buf[10];              //floor Set temp 3
            uart3_tx_data_buf[i++] = room_data_buf[6];              //air check temp 3              
          }
          
          break;
          
        case 3: //TS 4
          if(!ondol_set_flag[3])
          {              
            uart3_tx_data_buf[i++] = room_data_buf[3];              //Set temp 4
            uart3_tx_data_buf[i++] = room_data_buf[7];              //check temp 4            
          }
          else
          {
            uart3_tx_data_buf[i++] = room_data_buf[11];              //floor Set temp 4
            uart3_tx_data_buf[i++] = room_data_buf[7];              //air check temp 4           
          }
          
          break;
        }
        uart3_tx_data_buf[i++] = room_data_buf[31];             //Humidity 1
        
        switch(ts_id)
        {
          case 0: //TS 1 STATUS
            
          if(!ondol_set_flag[0]) //실내제어
          { 
            tt = room_data_buf[16] & 0x03;                          //Speed data
            if(room_data_buf[16] & 0x04) tt |= 0x04;                //대기센서 스위치 ON/OFF ?
            if(room_data_buf[16] & 0x08) tt |= 0x08;                //Temp sensor use ?
            if(room_data_buf[16] & 0x10) tt |= 0x10;                //valve open ?
            if(room_data_buf[20] & 0x04) tt |= 0x20;                //Cool or warm mode
            if(room_data_buf[20] & 0x08) tt |= 0x40;                //Auto or Manual mode
          }
          else //바닥제어
          {
            if(room_data_buf[16] & 0x10) tt |= 0x03;                //valve
            if(room_data_buf[16] & 0x20) tt |= 0x04;                //바닥센서 스위치 ON/OFF ?
            if(room_data_buf[20] & 0x04) tt |= 0x20;                //Cool or warm mode
            if(room_data_buf[20] & 0x08) tt |= 0x40;                //Auto or Manual mode
            tt |= 0x80;                                             //floor mode
          }
           
          uart3_tx_data_buf[i++] = tt;                            //TS1 status
          
          break;
          
          case 1: //TS 2 STATUS
          
          tt = room_data_buf[17] & 0x03;                          //Speed data
          if(room_data_buf[17] & 0x04) tt |= 0x04;                //대기센서 스위치 ON/OFF?
          if(room_data_buf[17] & 0x08) tt |= 0x08;                //Temp sensor use ?
          if(room_data_buf[17] & 0x10) tt |= 0x10;                //Temp sensor use ?
          if(room_data_buf[21] & 0x04) tt |= 0x20;                //Cool or warm mode
          if(room_data_buf[21] & 0x08) tt |= 0x40;                //Auto or Manual mode
          if(ondol_set_flag[1]) tt |= 0x80;                       //floor or air 
          uart3_tx_data_buf[i++] = tt;                            //TS2 status
                
          break;
          
          case 2: //TS 3 STATUS
           
          tt = room_data_buf[18] & 0x03;                          //Speed data
          if(room_data_buf[18] & 0x04) tt |= 0x04;                //대기센서 스위치 ON/OFF?
          if(room_data_buf[18] & 0x08) tt |= 0x08;                //Temp sensor use ?
          if(room_data_buf[18] & 0x10) tt |= 0x10;                //Temp sensor use ?
          if(room_data_buf[22] & 0x04) tt |= 0x20;                //Cool or warm mode
          if(room_data_buf[22] & 0x08) tt |= 0x40;                //Auto or Manual mode
          if(ondol_set_flag[2]) tt |= 0x80;                       //floor or air 
          uart3_tx_data_buf[i++] = tt;                            //TS2 status            
            
          break;
          
          case 3: //TS 4 STATUS
            
          tt = room_data_buf[19] & 0x03;                          //Speed data
          if(room_data_buf[19] & 0x04) tt |= 0x04;                //대기센서 스위치 ON/OFF?
          if(room_data_buf[19] & 0x08) tt |= 0x08;                //Temp sensor use ?
          if(room_data_buf[19] & 0x10) tt |= 0x10;                //Temp sensor use ?
          if(room_data_buf[23] & 0x04) tt |= 0x20;                //Cool or warm mode
          if(room_data_buf[23] & 0x08) tt |= 0x40;                //Auto or Manual mode
          if(ondol_set_flag[3]) tt |= 0x80;                       //floor or air 
          uart3_tx_data_buf[i++] = tt;                            //TS2 status                  
            
          break;
        }
        
        uart3_tx_data_buf[i++] = room_data_buf[28];             //대기 상,하한 온도
        uart3_tx_data_buf[i++] = room_data_buf[29];             //바닥 상,하한 온도
        
        ++ts_id;
        if(ts_id > 1) ts_id = 0;
        break;
        
      case 4:   //Audio page
        uart3_tx_data_buf[i++] = (room_data_buf[36] & 0x07);      //Audio channel
        uart3_tx_data_buf[i++] = room_data_buf[43];             //Audio Volume & Apply bit
        tt = 0;
        if(room_data_buf[36] & 0x08)  tt |= 0x01;               //Audio ON/OFF
        if(room_data_buf[36] & 0x40)  tt |= 0x02;               //Audio Mute
        uart3_tx_data_buf[i++] = tt;
        break;
        
      case 5:   //Curtain Page
        uart3_tx_data_buf[i++] = room_data_buf[100];             //Curtain status 1
        uart3_tx_data_buf[i++] = room_data_buf[101];             //Curtain status 2
        uart3_tx_data_buf[i++] = room_data_buf[102];             //Curtain status 3
        uart3_tx_data_buf[i++] = room_data_buf[103];             //Curtain status 4
        uart3_tx_data_buf[i++] = room_data_buf[104];             //Curtain status 5
        break;
    }
  }
  uart3_tx_data_buf[2] = i+1;                                 //Length
  for(j=1; j<i; ++j) crc += uart3_tx_data_buf[j];
  crc ^= 0x55;
  uart3_tx_data_buf[i++] = crc;                               //CRC
  uart3_tx_data_buf[i++] = ')';                               //ETX
  
  f_uart3_data_send = 1;
  uart3_tx_length = 0;
  uart3_tx_backup = i;
}


/* UART3 data send check routine */
void UART3_tx_check(void)
{
  if(f_uart3_data_send){
	  if(USART_GetFlagStatus(USART3, USART_FLAG_TC) !=RESET) {
      if(uart3_tx_length < uart3_tx_backup){
        USART3->DR = (uart3_tx_data_buf[uart3_tx_length++] & (u16)0x01FF);
      }
      else{
        P_UART3_DIR = 0;
        f_uart3_data_send = 0;
        if(f_uart3_data_send_time> 15) f_uart3_data_send_time = 15;
        //sub_call_timer = 15;
      }
    }
  }
}

void UART3_rx_check(void)
{
  unsigned char rx_crc=0;
  unsigned char i;
  
  if(f_uart3_frame_rx_ok)
  {
    f_uart3_frame_rx_ok = 0;

      for(i=0; i<uart3_rxd_buf[1]-2; ++i) rx_crc += uart3_rxd_buf[i];
      rx_crc ^= 0x55;
      if(rx_crc == (uart3_rxd_buf[uart3_rxd_buf[1]-2])){
        switch(uart3_rxd_buf[2] & 0xf0){          
        case 0x80:    //Night Table
          tnt_check(uart3_rxd_buf[2] & 0x03);
          break;
        }
        f_uart3_data_send_time = 18;
     }
  }
}

unsigned char dim_level_check(unsigned char index)
{
  unsigned char i;
  
  for(i=0; i<16; ++i){
    if(dimmer_level[index] <= b_dimmer_level_div[i]){
      dimmer_step_level[index] = i;
      break;
    }
  }
  return(dimmer_step_level[index]);
}

void tnt_check(unsigned char index)   //Smart pad rxd data check
{
  tnt_page_mode_buf = (uart3_rxd_buf[3] & 0x7f);
  if((tnt_page_mode_buf != 0) && (tnt_page_mode_buf <= 5)){
    tnt_page_mode = tnt_page_mode_buf;                         //View page mode
    if(tnt_page_mode == 0xff){                                //wi-fi status
    }
    else{
      if(tnt_toggle_power_on[index][tnt_page_mode] != 0){              //First power on
        
        f_nt_control = 1; //nt control flag
        
        if((tnt_toggle_bit[index][tnt_page_mode][0] & 0x01) != (uart3_rxd_buf[4] & 0x01)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][0],index);
        if((tnt_toggle_bit[index][tnt_page_mode][0] & 0x02) != (uart3_rxd_buf[4] & 0x02)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][1],index);
        if((tnt_toggle_bit[index][tnt_page_mode][0] & 0x04) != (uart3_rxd_buf[4] & 0x04)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][2],index);
        if((tnt_toggle_bit[index][tnt_page_mode][0] & 0x08) != (uart3_rxd_buf[4] & 0x08)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][3],index);
        if((tnt_toggle_bit[index][tnt_page_mode][0] & 0x10) != (uart3_rxd_buf[4] & 0x10)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][4],index);
        if((tnt_toggle_bit[index][tnt_page_mode][0] & 0x20) != (uart3_rxd_buf[4] & 0x20)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][5],index);
        if((tnt_toggle_bit[index][tnt_page_mode][0] & 0x40) != (uart3_rxd_buf[4] & 0x40)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][6],index);
        if((tnt_toggle_bit[index][tnt_page_mode][0] & 0x80) != (uart3_rxd_buf[4] & 0x80)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][7],index);
        
        if((tnt_toggle_bit[index][tnt_page_mode][1] & 0x01) != (uart3_rxd_buf[5] & 0x01)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][8],index);
        if((tnt_toggle_bit[index][tnt_page_mode][1] & 0x02) != (uart3_rxd_buf[5] & 0x02)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][9],index);
        if((tnt_toggle_bit[index][tnt_page_mode][1] & 0x04) != (uart3_rxd_buf[5] & 0x04)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][10],index);
        if((tnt_toggle_bit[index][tnt_page_mode][1] & 0x08) != (uart3_rxd_buf[5] & 0x08)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][11],index);
        if((tnt_toggle_bit[index][tnt_page_mode][1] & 0x10) != (uart3_rxd_buf[5] & 0x10)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][12],index);
        if((tnt_toggle_bit[index][tnt_page_mode][1] & 0x20) != (uart3_rxd_buf[5] & 0x20)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][13],index);
        if((tnt_toggle_bit[index][tnt_page_mode][1] & 0x40) != (uart3_rxd_buf[5] & 0x40)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][14],index);
        if((tnt_toggle_bit[index][tnt_page_mode][1] & 0x80) != (uart3_rxd_buf[5] & 0x80)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][15],index);
        
        if((tnt_toggle_bit[index][tnt_page_mode][2] & 0x01) != (uart3_rxd_buf[5] & 0x01)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][16],index);
        if((tnt_toggle_bit[index][tnt_page_mode][2] & 0x02) != (uart3_rxd_buf[5] & 0x02)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][17],index);
        if((tnt_toggle_bit[index][tnt_page_mode][2] & 0x04) != (uart3_rxd_buf[5] & 0x04)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][18],index);
        if((tnt_toggle_bit[index][tnt_page_mode][2] & 0x08) != (uart3_rxd_buf[5] & 0x08)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][19],index);
        if((tnt_toggle_bit[index][tnt_page_mode][2] & 0x10) != (uart3_rxd_buf[5] & 0x10)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][20],index);
        if((tnt_toggle_bit[index][tnt_page_mode][2] & 0x20) != (uart3_rxd_buf[5] & 0x20)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][21],index);
        if((tnt_toggle_bit[index][tnt_page_mode][2] & 0x40) != (uart3_rxd_buf[5] & 0x40)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][22],index);
        if((tnt_toggle_bit[index][tnt_page_mode][2] & 0x80) != (uart3_rxd_buf[5] & 0x80)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][23],index);
        
        if((tnt_toggle_bit[index][tnt_page_mode][3] & 0x01) != (uart3_rxd_buf[5] & 0x01)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][24],index);
        if((tnt_toggle_bit[index][tnt_page_mode][3] & 0x02) != (uart3_rxd_buf[5] & 0x02)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][25],index);
        if((tnt_toggle_bit[index][tnt_page_mode][3] & 0x04) != (uart3_rxd_buf[5] & 0x04)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][26],index);
        if((tnt_toggle_bit[index][tnt_page_mode][3] & 0x08) != (uart3_rxd_buf[5] & 0x08)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][27],index);
        if((tnt_toggle_bit[index][tnt_page_mode][3] & 0x10) != (uart3_rxd_buf[5] & 0x10)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][28],index);
        if((tnt_toggle_bit[index][tnt_page_mode][3] & 0x20) != (uart3_rxd_buf[5] & 0x20)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][29],index);
        if((tnt_toggle_bit[index][tnt_page_mode][3] & 0x40) != (uart3_rxd_buf[5] & 0x40)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][30],index);
        if((tnt_toggle_bit[index][tnt_page_mode][3] & 0x80) != (uart3_rxd_buf[5] & 0x80)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][31],index);
        
        if((tnt_toggle_bit[index][tnt_page_mode][4] & 0x01) != (uart3_rxd_buf[5] & 0x01)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][32],index);
        if((tnt_toggle_bit[index][tnt_page_mode][4] & 0x02) != (uart3_rxd_buf[5] & 0x02)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][33],index);
        if((tnt_toggle_bit[index][tnt_page_mode][4] & 0x04) != (uart3_rxd_buf[5] & 0x04)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][34],index);
        if((tnt_toggle_bit[index][tnt_page_mode][4] & 0x08) != (uart3_rxd_buf[5] & 0x08)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][35],index);
        if((tnt_toggle_bit[index][tnt_page_mode][4] & 0x10) != (uart3_rxd_buf[5] & 0x10)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][36],index);
        if((tnt_toggle_bit[index][tnt_page_mode][4] & 0x20) != (uart3_rxd_buf[5] & 0x20)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][37],index);
        if((tnt_toggle_bit[index][tnt_page_mode][4] & 0x40) != (uart3_rxd_buf[5] & 0x40)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][38],index);
        if((tnt_toggle_bit[index][tnt_page_mode][4] & 0x80) != (uart3_rxd_buf[5] & 0x80)) nt_switch_bit_check(b_tnt_switch_kind_table[index][tnt_page_mode-1][39],index);
        
        switch(tnt_page_mode){
          case 1:   //Main page
          case 5:   //Curtain page
            if(uart3_rxd_buf[9] & 0x02) nt_status[index] |= 0x10;   //Alram set
            else nt_status[index] &= 0xef;
            if(nt_status[index] & 0x10) f_alram_on = 1;
            else f_alram_on = 0;
            if(uart3_rxd_buf[9] & 0x04) nt_status[index] |= 0x80;   //CDS status
            else nt_status[index] &= 0x7f;
            if(index == 0){
              if(nt_status[0] & 0x80) room_data_buf[82] |= 0x08;    //CDS status set
              else room_data_buf[82] &= 0xf7;
            }
            break;
            
          case 2:   //Light mode
            if((dimmer_apply_bit & 0x01) == 0){
              if((dimmer_step_level[0]&0x0f) != (uart3_rxd_buf[10] & 0x0f)){
                dimmer_step_level[0] = uart3_rxd_buf[10] & 0x0f;
                dimmer_level[0] = b_dimmer_level_div[dimmer_step_level[0]];
              }
            }
            if((dimmer_apply_bit & 0x02) == 0){
              if((dimmer_step_level[1]&0x0f) != ((uart3_rxd_buf[10] & 0xf0) >> 4)){
                dimmer_step_level[1] = (uart3_rxd_buf[10] & 0xf0) >> 4;
                dimmer_level[1] = b_dimmer_level_div[dimmer_step_level[1]];
              }
            }
            if((dimmer_apply_bit & 0x04) == 0){
              if((dimmer_step_level[2]&0x0f) != (uart3_rxd_buf[11] & 0x0f)){
                dimmer_step_level[2] = uart3_rxd_buf[11] & 0x0f;
                dimmer_level[2] = b_dimmer_level_div[dimmer_step_level[2]];
              }
            }
            if((dimmer_apply_bit & 0x08) == 0){
              if((dimmer_step_level[3]&0x0f) != ((uart3_rxd_buf[11] & 0xf0) >> 4)){
                dimmer_step_level[3] = (uart3_rxd_buf[11] & 0xf0) >> 4;
                dimmer_level[3] = b_dimmer_level_div[dimmer_step_level[3]];
              }
            }
            if((dimmer_apply_bit & 0x10) == 0){
              if((dimmer_step_level[4]&0x0f) != (uart3_rxd_buf[12] & 0x0f)){
                dimmer_step_level[4] = uart3_rxd_buf[12] & 0x0f;
                dimmer_level[4] = b_dimmer_level_div[dimmer_step_level[4]];
              }
            }
            if((dimmer_apply_bit & 0x20) == 0){
              if((dimmer_step_level[5]&0x0f) != ((uart3_rxd_buf[12] & 0xf0) >> 4)){
                dimmer_step_level[5] = (uart3_rxd_buf[12] & 0xf0) >> 4;
                dimmer_level[5] = b_dimmer_level_div[dimmer_step_level[5]];
              }
            }
            break;
            
          case 3:   //Temperature page
            
            if(!ondol_set_flag[0]) //실내제어
            {
              if(((uart3_rxd_buf[9] & 0x7f) >= (25 - (room_data_buf[28] & 0x0f))) && ((uart3_rxd_buf[9]&0x7f) <= (25 + ((room_data_buf[28] & 0xf0) >> 4)))){    //max ~ min limit set temp check
                if(room_data_buf[0] != uart3_rxd_buf[9]){    //TS1 set temp channge
                  ts_air_set_temp_from_PC[0] = uart3_rxd_buf[9];
                  room_data_buf[0] = uart3_rxd_buf[9];    //TS1 set temp channge
                  room_data_buf[16] |= 0x80;
                }
              }
            }
            else //바닥제어
            {
              if(((uart3_rxd_buf[9] & 0x7f) >= (25 - (room_data_buf[29] & 0x0f))) && ((uart3_rxd_buf[9]&0x7f) <= (25 + ((room_data_buf[29] & 0xf0) >> 4)))){    //max ~ min limit set temp check
                if(room_data_buf[8] != uart3_rxd_buf[9]){    //TS1 set temp channge
                  ts_floor_set_temp_from_PC[0] = uart3_rxd_buf[9];
                  room_data_buf[8] = uart3_rxd_buf[9];    //TS1 set temp channge
                  room_data_buf[20] |= 0x80;
                }
              }              
            }
            
            if(!ondol_set_flag[1])  //실내제어
            {
              if(((uart3_rxd_buf[10] & 0x7f) >= (25 - (room_data_buf[28] & 0x0f))) && ((uart3_rxd_buf[10]&0x7f) <= (25 + ((room_data_buf[28] & 0xf0) >> 4)))){    //max ~ min limit set temp check
                if(room_data_buf[1] != uart3_rxd_buf[10]){    //TS2 set temp channge
                  ts_air_set_temp_from_PC[1] = uart3_rxd_buf[10];
                  room_data_buf[1] = uart3_rxd_buf[10];    //TS2 set temp channge
                  room_data_buf[17] |= 0x80;
                }
              }      
            }
            else
            {
              
            }
            
            
            if(((uart3_rxd_buf[11] & 0x7f) >= (25 - (room_data_buf[28] & 0x0f))) && ((uart3_rxd_buf[11]&0x7f) <= (25 + ((room_data_buf[28] & 0xf0) >> 4)))){    //max ~ min limit set temp check
              if(room_data_buf[2] != uart3_rxd_buf[11]){    //TS3 set temp channge
                ts_air_set_temp_from_PC[1] = uart3_rxd_buf[10];
                room_data_buf[2] = uart3_rxd_buf[11];    //TS3 set temp channge
                room_data_buf[18] |= 0x80;
              }
            }    
            if(((uart3_rxd_buf[12] & 0x7f) >= (25 - (room_data_buf[28] & 0x0f))) && ((uart3_rxd_buf[12]&0x7f) <= (25 + ((room_data_buf[28] & 0xf0) >> 4)))){    //max ~ min limit set temp check
              if(room_data_buf[3] != uart3_rxd_buf[12]){    //TS4 set temp channge
                ts_air_set_temp_from_PC[1] = uart3_rxd_buf[10];
                room_data_buf[3] = uart3_rxd_buf[12];    //TS4 set temp channge
                room_data_buf[19] |= 0x80;
              }
            }                        
            break;
            
          case 4:   //Audio page
            room_data_buf[36+index] &= 0xf8;
            room_data_buf[36+index] |= (uart3_rxd_buf[9] & 0x07);   //Audio channel set
            room_data_buf[43] &= 0x80;
            room_data_buf[43] |= (uart3_rxd_buf[10] & 0x7f);         //Audio Volume set
            break;
            
        }
        tnt_toggle_bit[index][tnt_page_mode][0] = uart3_rxd_buf[4];
        tnt_toggle_bit[index][tnt_page_mode][1] = uart3_rxd_buf[5];
        tnt_toggle_bit[index][tnt_page_mode][2] = uart3_rxd_buf[6];
        tnt_toggle_bit[index][tnt_page_mode][3] = uart3_rxd_buf[7];
        tnt_toggle_bit[index][tnt_page_mode][4] = uart3_rxd_buf[8];
      }
      else{
        tnt_toggle_bit[index][tnt_page_mode][0] = uart3_rxd_buf[4];    //First power on switch bit save
        tnt_toggle_bit[index][tnt_page_mode][1] = uart3_rxd_buf[5];
        tnt_toggle_bit[index][tnt_page_mode][2] = uart3_rxd_buf[6];
        tnt_toggle_bit[index][tnt_page_mode][3] = uart3_rxd_buf[7];
        tnt_toggle_bit[index][tnt_page_mode][4] = uart3_rxd_buf[8];
        tnt_toggle_power_on[index][tnt_page_mode] = 1;                 //First power on Flag set
      }
    }
  }
  else
  {
    if(uart3_rxd_buf[3] == 7) tnt_heartbeat = uart3_rxd_buf[9];
  }
}


